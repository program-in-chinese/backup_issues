{
    "assignee": null,
    "assignees": [],
    "author_association": "MEMBER",
    "body": "只要装了语言的vsc支持插件, 应该就可以识别源码中的标识符并批量翻译。这里进行验证,并记录安装的语言插件. 主要关注翻译的覆盖程度, 如发现翻译质量问题, 在其他issue记录.\r\n语言从[支持中文命名的](https://github.com/program-in-chinese/team_website/blob/master/_posts/2017-10-23-%E5%9C%A8%E5%90%84%E7%A7%8D%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%AD%E6%96%87%E5%91%BD%E5%90%8D.markdown)开始. 以业务逻辑丰富和专业术语较多的代码段优先, 最好100行左右, 热门项目优先.\r\n\r\n已验证的:\r\n- Python\r\n- Java\r\n- PHP\r\n- JavaScript (#30)",
    "closed_at": null,
    "comment_data": [
        {
            "author_association": "MEMBER",
            "body": "测试环境: 插件v0.0.11; ms-python.python 2019.1.0\r\n**Python**\r\nhttps://github.com/OCA/vertical-medical/blob/7ae22f05b55339c3faa198e6ddc766b0d91f6564/medical_disease/models/medical_patient_disease.py\r\n```python\r\n# -*- coding: utf-8 -*-\r\n###############################################################################\r\n#\r\n# Copyright 2008 Luis Falcon <lfalcon@gnusolidario.org>\r\n#\r\n#    This program is free software: you can redistribute it and/or modify\r\n#    it under the terms of the GNU Affero General Public License as\r\n#    published by the Free Software Foundation, either version 3 of the\r\n#    License, or (at your option) any later version.\r\n#\r\n#    This program is distributed in the hope that it will be useful,\r\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n#    GNU Affero General Public License for more details.\r\n#\r\n#    You should have received a copy of the GNU Affero General Public License\r\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n###############################################################################\r\n\r\nfrom openerp import models, fields, api\r\n\r\n\r\nclass MedicalPatientDisease(models.Model):\r\n    _name = 'medical.patient.disease'\r\n    _description = 'Medical Patient Disease'\r\n\r\n    @api.one\r\n    @api.depends('short_comment', 'pathology_id', 'pathology_id.name')\r\n    def _compute_name(self):\r\n        name = self.pathology_id.name\r\n        if self.short_comment:\r\n            name = '%s - %s' % (name, self.short_comment)\r\n        self.name = name\r\n\r\n    @api.one\r\n    @api.depends('active')\r\n    def _compute_expire_date(self):\r\n        if self.active:\r\n            self.expire_date = False\r\n        else:\r\n            self.expire_date = fields.Datetime.now()\r\n\r\n    @api.one\r\n    def action_invalidate(self):\r\n        self.active = False\r\n\r\n    @api.one\r\n    def action_revalidate(self):\r\n        self.active = True\r\n\r\n    name = fields.Char(compute='_compute_name', store=True)\r\n    treatment_description = fields.Char()\r\n    expire_date = fields.Datetime(compute='_compute_expire_date', store=True)\r\n    short_comment = fields.Char()\r\n    pathology_id = fields.Many2one(\r\n        comodel_name='medical.pathology', string='Pathology', index=True,\r\n        required=True)\r\n    physician_id = fields.Many2one(\r\n        comodel_name='medical.physician', string='Physician', index=True)\r\n    patient_id = fields.Many2one(\r\n        comodel_name='medical.patient', string='Patient', required=True,\r\n        index=True)\r\n    disease_severity = fields.Selection([\r\n        ('1_mi', 'Mild'),\r\n        ('2_mo', 'Moderate'),\r\n        ('3_sv', 'Severe')\r\n    ], string='Severity')\r\n    state = fields.Selection([\r\n        ('a', 'Acute'),\r\n        ('c', 'Chronic'),\r\n        ('u', 'Unchanged'),\r\n        ('h', 'Healed'),\r\n        ('i', 'Improving'),\r\n        ('w', 'Worsening'),\r\n    ], string='Status of the disease')\r\n    allergy_type = fields.Selection([\r\n        ('da', 'Drug Allergy'),\r\n        ('fa', 'Food Allergy'),\r\n        ('ma', 'Misc Allergy'),\r\n        ('mc', 'Misc Contraindication'),\r\n    ])\r\n    weeks_of_pregnancy = fields.Integer(\r\n        help='Week number of pregnancy when disease contracted',\r\n        string='Pregnancy Week#')\r\n    age = fields.Integer(string='Age when diagnosed')\r\n    active = fields.Boolean(default=True)\r\n    is_infectious = fields.Boolean(string='Infectious Disease')\r\n    is_allergy = fields.Boolean(string='Allergic Disease')\r\n    pregnancy_warning = fields.Boolean()\r\n    is_pregnant = fields.Boolean(string='Pregnancy warning')\r\n    is_on_treatment = fields.Boolean(string='Currently on Treatment')\r\n    treatment_start_date = fields.Date()\r\n    treatment_end_date = fields.Date()\r\n    diagnosed_date = fields.Date(string='Date of Diagnosis')\r\n    healed_date = fields.Date(string='Date of Healing')\r\n    notes = fields.Text()\r\n```\r\n翻译后:\r\n```python\r\n# -*- coding: utf-8 -*-\r\n###############################################################################\r\n#\r\n# Copyright 2008 Luis Falcon <lfalcon@gnusolidario.org>\r\n#\r\n#    This program is free software: you can redistribute it and/or modify\r\n#    it under the terms of the GNU Affero General Public License as\r\n#    published by the Free Software Foundation, either version 3 of the\r\n#    License, or (at your option) any later version.\r\n#\r\n#    This program is distributed in the hope that it will be useful,\r\n#    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n#    GNU Affero General Public License for more details.\r\n#\r\n#    You should have received a copy of the GNU Affero General Public License\r\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n#\r\n###############################################################################\r\n\r\nfrom openerp import 模型, 域, api\r\n\r\n\r\nclass 医生病人疾病(模型.Model):\r\n    名称 = 'medical.patient.disease'\r\n    描述 = 'Medical Patient Disease'\r\n\r\n    @api.one\r\n    @api.depends('短的_备注', '病理学_识别', '病理学_识别.名称')\r\n    def _计算_名称(self):\r\n        名称 = self.病理学_识别.名称\r\n        if self.短的_备注:\r\n            名称 = '%s - %s' % (名称, self.短的_备注)\r\n        self.名称 = 名称\r\n\r\n    @api.one\r\n    @api.depends('活跃的')\r\n    def _计算_期满_日期(self):\r\n        if self.活跃的:\r\n            self.过期日期 = False\r\n        else:\r\n            self.过期日期 = 域.Datetime.now()\r\n\r\n    @api.one\r\n    def 方式_使无效(self):\r\n        self.活跃的 = False\r\n\r\n    @api.one\r\n    def 方式_使重新生效(self):\r\n        self.活跃的 = True\r\n\r\n    名称 = 域.Char(compute='_计算_名称', store=True)\r\n    治疗_描述 = 域.Char()\r\n    过期日期 = 域.Datetime(compute='_计算_期满_日期', store=True)\r\n    短的_备注 = 域.Char()\r\n    病理学_识别 = 域.Many2one(\r\n        comodel名称='medical.pathology', string='Pathology', index=True,\r\n        required=True)\r\n    医师_识别 = 域.Many2one(\r\n        comodel名称='medical.physician', string='Physician', index=True)\r\n    忍耐的_识别 = 域.Many2one(\r\n        comodel名称='medical.patient', string='Patient', required=True,\r\n        index=True)\r\n    疾病_严格 = 域.Selection([\r\n        ('1_mi', 'Mild'),\r\n        ('2_mo', 'Moderate'),\r\n        ('3_sv', 'Severe')\r\n    ], string='Severity')\r\n    状态 = 域.Selection([\r\n        ('a', 'Acute'),\r\n        ('c', 'Chronic'),\r\n        ('u', 'Unchanged'),\r\n        ('h', 'Healed'),\r\n        ('i', 'Improving'),\r\n        ('w', 'Worsening'),\r\n    ], string='Status of the disease')\r\n    变应性_类型 = 域.Selection([\r\n        ('da', 'Drug Allergy'),\r\n        ('fa', 'Food Allergy'),\r\n        ('ma', 'Misc Allergy'),\r\n        ('mc', 'Misc Contraindication'),\r\n    ])\r\n    星期_of_怀孕 = 域.Integer(\r\n        help='Week number of pregnancy when disease contracted',\r\n        string='Pregnancy Week#')\r\n    年龄 = 域.Integer(string='Age when diagnosed')\r\n    活跃的 = 域.Boolean(default=True)\r\n    为_有传染性的 = 域.Boolean(string='Infectious Disease')\r\n    为_变应性 = 域.Boolean(string='Allergic Disease')\r\n    怀孕_警告 = 域.Boolean()\r\n    为_怀孕的 = 域.Boolean(string='Pregnancy warning')\r\n    为_打开_治疗 = 域.Boolean(string='Currently on Treatment')\r\n    治疗_起始_日期 = 域.Date()\r\n    治疗_端_日期 = 域.Date()\r\n    诊断_日期 = 域.Date(string='Date of Diagnosis')\r\n    愈合_日期 = 域.Date(string='Date of Healing')\r\n    票据 = 域.Text()\r\n```",
            "created_at": "2019-05-12T23:40:42Z",
            "html_url": "https://github.com/program-in-chinese/vscode_english_chinese_dictionary/issues/27#issuecomment-491638875",
            "id": 491638875,
            "issue_url": "https://api.github.com/repos/program-in-chinese/vscode_english_chinese_dictionary/issues/27",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTYzODg3NQ==",
            "updated_at": "2019-05-12T23:40:42Z",
            "url": "https://api.github.com/repos/program-in-chinese/vscode_english_chinese_dictionary/issues/comments/491638875",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/392497?v=4",
                "events_url": "https://api.github.com/users/nobodxbodon/events{/privacy}",
                "followers_url": "https://api.github.com/users/nobodxbodon/followers",
                "following_url": "https://api.github.com/users/nobodxbodon/following{/other_user}",
                "gists_url": "https://api.github.com/users/nobodxbodon/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nobodxbodon",
                "id": 392497,
                "login": "nobodxbodon",
                "node_id": "MDQ6VXNlcjM5MjQ5Nw==",
                "organizations_url": "https://api.github.com/users/nobodxbodon/orgs",
                "received_events_url": "https://api.github.com/users/nobodxbodon/received_events",
                "repos_url": "https://api.github.com/users/nobodxbodon/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nobodxbodon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nobodxbodon/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nobodxbodon"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "**Java**  vscjava.vscode-java-pack 0.6.0\r\nhttps://github.com/Sunny-Nishan/HealthAnalytics/blob/ed194f08499c9cb791569dbce8eaa9c81dcea78e/src/com/spring/controller/DiseaseController.java\r\n```java\r\npackage com.spring.controller;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.servlet.http.HttpSession;\r\n\r\nimport org.jboss.logging.annotations.Param;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.ModelAttribute;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\nimport org.springframework.web.servlet.ModelAndView;\r\n\r\nimport com.spring.DAO.DiseaseDAO;\r\nimport com.spring.VO.CountryVO;\r\nimport com.spring.VO.DiseaseVO;\r\n\r\n@Controller\r\n@RequestMapping(\"/admin\")\r\npublic class DiseaseController {\r\n\t\r\n\t@Autowired\r\n\tDiseaseDAO disease;\r\n\r\n\t@RequestMapping(value=\"/viewDisease.html\" , method=RequestMethod.GET)\r\n\tpublic String viewDisease(HttpSession session) throws Exception\r\n\t{\r\n\t\tList<Object> list=this.disease.getDisease();\r\n\t\tsession.setAttribute(\"list\",list);\r\n\t\treturn(\"admin/viewDisease\");\r\n\t\t\r\n\t}\r\n\r\n\t@RequestMapping(value=\"/addDisease.html\" , method=RequestMethod.GET)\r\n\tpublic ModelAndView addDisease()\r\n\t{\r\n\t\treturn new ModelAndView(\"admin/addDisease\",\"insertDisease\",new DiseaseVO());\r\n\t\t\r\n\t}\r\n\t\r\n\t@RequestMapping(value=\"/insertDisease\" , method=RequestMethod.POST)\r\n\tpublic String insertDisease(@ModelAttribute DiseaseVO insertDisease)\r\n\t{\r\n\t\tdisease.insertDisease(insertDisease);\r\n\t\treturn(\"redirect:/addDisease.html\");\r\n\t\t\r\n\t}\r\n\t\r\n\t@RequestMapping(value=\"/deleteDisease.html\" , method=RequestMethod.GET)\r\n\tpublic String deleteDisease(@Param int id)\r\n\t{\r\n\t\tdisease.deleteDisease(id);\r\n\t\treturn(\"redirect:/viewDisease.html\");\r\n\t\t\r\n\t}\r\n\t\r\n\t@RequestMapping(value=\"/editDisease.html\" , method=RequestMethod.GET)\r\n\tpublic ModelAndView editCountry(@Param int id, HttpSession session)\r\n\t{\r\n\t\tList<Object> DiseaseList=this.disease.editDisease(id);\r\n\t\tsession.setAttribute(\"list\",DiseaseList);\r\n\t\t\r\n\t\t\treturn new ModelAndView(\"admin/editDisease\",\"updateDisease\",new DiseaseVO()); \r\n\t\t\r\n\t}\r\n\t\r\n\t@RequestMapping(value=\"/updateDisease.html\" , method=RequestMethod.POST)\r\n\tpublic ModelAndView updateDisease(@ModelAttribute DiseaseVO  updateDisease)\r\n\t{\r\n\t\tdisease.insertDisease(updateDisease);\r\n\t\treturn new ModelAndView(\"redirect:/viewDisease.html\");\r\n\t\t\r\n\t}\r\n\t\r\n\t@RequestMapping(value=\"/deleteDiseaseisActive.html\" , method=RequestMethod.GET)\r\n\tpublic String updateisActive(@Param int id) throws Exception\r\n\t{\r\n\t\tthis.disease.updateIsactive(id);\r\n\t\t\r\n\t\treturn(\"redirect:/viewDisease.html\");\r\n\t\t\r\n\t}\r\n}\r\n```\r\n翻译后:\r\n```java\r\npack年龄 com.春天.控制器;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.servlet.http.HttpSession;\r\n\r\nimport org.jboss.logging.annotations.Param;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.ModelAttribute;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\nimport org.springframework.web.servlet.ModelAndView;\r\n\r\nimport com.spring.DAO.DiseaseDAO;\r\nimport com.spring.VO.CountryVO;\r\nimport com.spring.VO.DiseaseVO;\r\n\r\n@Controller\r\n@RequestMapping(\"/admin\")\r\npublic class 疾病控制器 {\r\n\t\r\n\t@Autowired\r\n\tDiseaseDAO 疾病;\r\n\r\n\t@RequestMapping(value=\"/视图疾病.html\" , method=RequestMethod.GET)\r\n\tpublic String 视图疾病(HttpSession session) throws Exception\r\n\t{\r\n\t\tList<Object> list=this.疾病.getDisease();\r\n\t\tsession.setAttribute(\"list\",list);\r\n\t\treturn(\"admin/视图疾病\");\r\n\t\t\r\n\t}\r\n\r\n\t@RequestMapping(value=\"/添加疾病.html\" , method=RequestMethod.GET)\r\n\tpublic ModelAndView 添加疾病()\r\n\t{\r\n\t\treturn new ModelAndView(\"admin/添加疾病\",\"插入疾病\",new DiseaseVO());\r\n\t\t\r\n\t}\r\n\t\r\n\t@RequestMapping(value=\"/插入疾病\" , method=RequestMethod.POST)\r\n\tpublic String 插入疾病(@ModelAttribute DiseaseVO 插入疾病)\r\n\t{\r\n\t\t疾病.插入疾病(插入疾病);\r\n\t\treturn(\"redirect:/添加疾病.html\");\r\n\t\t\r\n\t}\r\n\t\r\n\t@RequestMapping(value=\"/删除疾病.html\" , method=RequestMethod.GET)\r\n\tpublic String 删除疾病(@Param int id)\r\n\t{\r\n\t\t疾病.删除疾病(id);\r\n\t\treturn(\"redirect:/视图疾病.html\");\r\n\t\t\r\n\t}\r\n\t\r\n\t@RequestMapping(value=\"/editDisease.html\" , method=RequestMethod.GET)\r\n\tpublic ModelAndView 编辑DOS外部命令:用于设定国家代码(@Param int id, HttpSession session)\r\n\t{\r\n\t\tList<Object> DiseaseList=this.疾病.editDisease(id);\r\n\t\tsession.setAttribute(\"list\",DiseaseList);\r\n\t\t\r\n\t\t\treturn new ModelAndView(\"admin/editDisease\",\"更新疾病\",new DiseaseVO()); \r\n\t\t\r\n\t}\r\n\t\r\n\t@RequestMapping(value=\"/更新疾病.html\" , method=RequestMethod.POST)\r\n\tpublic ModelAndView 更新疾病(@ModelAttribute DiseaseVO  更新疾病)\r\n\t{\r\n\t\t疾病.插入疾病(更新疾病);\r\n\t\treturn new ModelAndView(\"redirect:/视图疾病.html\");\r\n\t\t\r\n\t}\r\n\t\r\n\t@RequestMapping(value=\"/删除疾病isActive.html\" , method=RequestMethod.GET)\r\n\tpublic String updateis活跃的(@Param int id) throws Exception\r\n\t{\r\n\t\tthis.疾病.updateIs活跃的(id);\r\n\t\t\r\n\t\treturn(\"redirect:/视图疾病.html\");\r\n\t\t\r\n\t}\r\n}\r\n```\r\n",
            "created_at": "2019-05-12T23:54:32Z",
            "html_url": "https://github.com/program-in-chinese/vscode_english_chinese_dictionary/issues/27#issuecomment-491639699",
            "id": 491639699,
            "issue_url": "https://api.github.com/repos/program-in-chinese/vscode_english_chinese_dictionary/issues/27",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTYzOTY5OQ==",
            "updated_at": "2019-05-12T23:54:32Z",
            "url": "https://api.github.com/repos/program-in-chinese/vscode_english_chinese_dictionary/issues/comments/491639699",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/392497?v=4",
                "events_url": "https://api.github.com/users/nobodxbodon/events{/privacy}",
                "followers_url": "https://api.github.com/users/nobodxbodon/followers",
                "following_url": "https://api.github.com/users/nobodxbodon/following{/other_user}",
                "gists_url": "https://api.github.com/users/nobodxbodon/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nobodxbodon",
                "id": 392497,
                "login": "nobodxbodon",
                "node_id": "MDQ6VXNlcjM5MjQ5Nw==",
                "organizations_url": "https://api.github.com/users/nobodxbodon/orgs",
                "received_events_url": "https://api.github.com/users/nobodxbodon/received_events",
                "repos_url": "https://api.github.com/users/nobodxbodon/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nobodxbodon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nobodxbodon/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nobodxbodon"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "**PHP** `felixfbecker.php-pack` 1.0.2\r\n```php\r\n<?php\r\nclass HealthConditionsPersistence\r\n{\r\n    public static function getById(AcsDataBase $db, $id)\r\n    {\r\n        $query = \"SELECT HC.WEIGHT,\r\n                P.PREGNANT, P.DESCRIPTION AS PREGNANT_DESCRIPTION,\r\n                D.SMOKER, D.ALCOHOL, D.DRUGS, D.DIABETES, D.AVC, D.HEART_ATTACK, D.LEPROSY, D.TUBERCULOSIS, D.CANCER, D.IN_BED,\r\n                D.DOMICILED, D.OTHER_PRACTICES, D.MENTAL_HEALTH, D.HYPERTENSION,\r\n                H.HEART_DISEASE, H.INSUFFICIENCY AS HEART_DISEASE_INSUFFICIENCY, H.ANOTHER AS HEART_DISEASE_ANOTHER, \r\n                H.DONT_KNOWN AS HEART_DISEASE_DONT_KNOWN,\r\n                K.KIDNEY_DISEASE, K.INSUFFICIENCY AS KIDNEY_DISEASE_INSUFFICIENCY, K.ANOTHER AS KIDNEY_DISEASE_ANOTHER, \r\n                K.DONT_KNOWN AS KIDNEY_DISEASE_DONT_KNOWN,\r\n                R.RESPIRATORY_DISEASE, R.ASTHMA, R.EMPHYSEMA, R.ANOTHER AS RESPIRATORY_DISEASE_ANOTHER, \r\n                R.DONT_KNOWN AS RESPIRATORY_DISEASE_DONT_KNOWN,\r\n                I.INTERMENT, I.DESCRIPTION AS INTERMENT_DESCRIPTION,\r\n                T.PLANT, T.DESCRIPTION AS PLANT_DESCRIPTION\r\n            FROM tb_health_conditions AS HC\r\n            INNER JOIN tb_pregnant AS P ON P.PREGNANT_ID = HC.ID_PREGNANT\r\n            INNER JOIN tb_diseases AS D ON D.DISEASES_ID = HC.ID_DISEASES\r\n            INNER JOIN tb_heart_disease AS H ON H.HEART_DISEASE_ID = HC.ID_HEART_DISEASE\r\n            INNER JOIN tb_kidney_disease AS K ON K.KIDNEY_DISEASE_ID = HC.ID_KIDNEY_DISEASE\r\n            INNER JOIN tb_respiratory_disease AS R ON R.RESPIRATORY_DISEASE_ID = HC.ID_RESPIRATORY_DISEASE\r\n            INNER JOIN tb_interment AS I ON I.INTERMENT_ID = HC.ID_INTERMENT\r\n            INNER JOIN tb_plant AS T ON T.PLANT_ID = HC.ID_PLANT\r\n            WHERE HC.HEALTH_CONDITIONS_ID = :HEALTH_CONDITIONS_ID\";\r\n        return $db->select($query, array(\":HEALTH_CONDITIONS_ID\" => $id));\r\n    }\r\n    static function insert(AcsDataBase $db, HealthConditionsModel $healthConditions)\r\n    {\r\n        $values = $healthConditions->getValuesToDB();\r\n        $ids[\":ID_\" . Pregnant::PREGNANT] = $db->insert(self::queryPregnant(), $values[Pregnant::PREGNANT]);\r\n        $ids[\":ID_\" . Diseases::DISEASES] = $db->insert(self::queryDiseases(), $values[Diseases::DISEASES]);\r\n        $ids[\":ID_\" . HeartDisease::HEART_DISEASE] = $db->insert(self::queryHearthDisease(), $values[HeartDisease::HEART_DISEASE]);\r\n        $ids[\":ID_\" . KidneyDisease::KIDNEY_DISEASE] = $db->insert(self::queryKidneyDisease(), $values[KidneyDisease::KIDNEY_DISEASE]);\r\n        $ids[\":ID_\" . RespiratoryDisease::RESPIRATORY_DISEASE] = $db->insert(self::queryRespiratoryDisease(), $values[RespiratoryDisease::RESPIRATORY_DISEASE]);\r\n        $ids[\":ID_\" . Interment::INTERMENT] = $db->insert(self::queryInterment(), $values[Interment::INTERMENT]);\r\n        $ids[\":ID_\" . Plant::PLANT] = $db->insert(self::queryPlant(), $values[Plant::PLANT]);\r\n        if(in_array(false, $ids)){\r\n            return false;\r\n        }\r\n        $ids[\":\" . HealthConditionsModel::WEIGHT] = $values[HealthConditionsModel::WEIGHT];\r\n        return $db->insert(self::queryHealthConditions(), $ids);\r\n    }\r\n    private static function queryHealthConditions()\r\n    {\r\n        return \"INSERT INTO TB_HEALTH_CONDITIONS (WEIGHT, ID_PREGNANT, ID_DISEASES, ID_HEART_DISEASE, \r\n                        ID_KIDNEY_DISEASE, ID_RESPIRATORY_DISEASE, ID_INTERMENT, ID_PLANT) \r\n                  VALUES (:WEIGHT, :ID_PREGNANT, :ID_DISEASES, :ID_HEART_DISEASE, \r\n                        :ID_KIDNEY_DISEASE, :ID_RESPIRATORY_DISEASE, :ID_INTERMENT, :ID_PLANT)\";\r\n    }\r\n    private static function queryPregnant()\r\n    {\r\n        return \"INSERT INTO TB_PREGNANT (PREGNANT, DESCRIPTION)\r\n                  VALUES (:PREGNANT, :DESCRIPTION)\";\r\n    }\r\n    private static function queryDiseases()\r\n    {\r\n        return \"INSERT INTO TB_DISEASES (SMOKER, ALCOHOL, DRUGS, HYPERTENSION, DIABETES,AVC, HEART_ATTACK, LEPROSY, TUBERCULOSIS, \r\n                        CANCER, IN_BED, DOMICILED, OTHER_PRACTICES, MENTAL_HEALTH)\r\n                  VALUES (:SMOKER, :ALCOHOL, :DRUGS, :HYPERTENSION, :DIABETES, :AVC, :HEART_ATTACK, :LEPROSY, :TUBERCULOSIS, \r\n                        :CANCER, :IN_BED, :DOMICILED, :OTHER_PRACTICES, :MENTAL_HEALTH)\";\r\n    }\r\n    private static function queryHearthDisease()\r\n    {\r\n        return \"INSERT INTO TB_HEART_DISEASE (HEART_DISEASE, INSUFFICIENCY, ANOTHER, DONT_KNOWN)\r\n                  VALUES (:HEART_DISEASE, :INSUFFICIENCY, :ANOTHER, :DONT_KNOWN)\";\r\n    }\r\n    private static function queryKidneyDisease()\r\n    {\r\n        return \"INSERT INTO TB_KIDNEY_DISEASE (KIDNEY_DISEASE, INSUFFICIENCY, ANOTHER, DONT_KNOWN) \r\n                  VALUES (:KIDNEY_DISEASE, :INSUFFICIENCY, :ANOTHER, :DONT_KNOWN)\";\r\n    }\r\n    private static function queryRespiratoryDisease()\r\n    {\r\n        return \"INSERT INTO TB_RESPIRATORY_DISEASE (RESPIRATORY_DISEASE, ASTHMA, EMPHYSEMA, ANOTHER, DONT_KNOWN) \r\n                  VALUES (:RESPIRATORY_DISEASE, :ASTHMA, :EMPHYSEMA, :ANOTHER, :DONT_KNOWN)\";\r\n    }\r\n    private static function queryInterment()\r\n    {\r\n        return \"INSERT INTO TB_INTERMENT (INTERMENT, DESCRIPTION)\r\n                  VALUES (:INTERMENT, :DESCRIPTION)\";\r\n    }\r\n    private static function queryPlant()\r\n    {\r\n        return \"INSERT INTO TB_PLANT (PLANT, DESCRIPTION)\r\n                  VALUES (:PLANT, :DESCRIPTION)\";\r\n    }\r\n}\r\n```\r\n翻译后:\r\n```php\r\n<?php\r\nclass 健康条件固执\r\n{\r\n    public static function 获取被识别(AcsDataBase $db, $id)\r\n    {\r\n        $query = \"SELECT HC.WEIGHT,\r\n                P.PREGNANT, P.DESCRIPTION AS PREGNANT_DESCRIPTION,\r\n                D.SMOKER, D.ALCOHOL, D.DRUGS, D.DIABETES, D.AVC, D.HEART_ATTACK, D.LEPROSY, D.TUBERCULOSIS, D.CANCER, D.IN_BED,\r\n                D.DOMICILED, D.OTHER_PRACTICES, D.MENTAL_HEALTH, D.HYPERTENSION,\r\n                H.HEART_DISEASE, H.INSUFFICIENCY AS HEART_DISEASE_INSUFFICIENCY, H.ANOTHER AS HEART_DISEASE_ANOTHER, \r\n                H.DONT_KNOWN AS HEART_DISEASE_DONT_KNOWN,\r\n                K.KIDNEY_DISEASE, K.INSUFFICIENCY AS KIDNEY_DISEASE_INSUFFICIENCY, K.ANOTHER AS KIDNEY_DISEASE_ANOTHER, \r\n                K.DONT_KNOWN AS KIDNEY_DISEASE_DONT_KNOWN,\r\n                R.RESPIRATORY_DISEASE, R.ASTHMA, R.EMPHYSEMA, R.ANOTHER AS RESPIRATORY_DISEASE_ANOTHER, \r\n                R.DONT_KNOWN AS RESPIRATORY_DISEASE_DONT_KNOWN,\r\n                I.INTERMENT, I.DESCRIPTION AS INTERMENT_DESCRIPTION,\r\n                T.PLANT, T.DESCRIPTION AS PLANT_DESCRIPTION\r\n            FROM tb_health_conditions AS HC\r\n            INNER JOIN tb_pregnant AS P ON P.PREGNANT_ID = HC.ID_PREGNANT\r\n            INNER JOIN tb_疾病s AS D ON D.DISEASES_ID = HC.ID_DISEASES\r\n            INNER JOIN tb_heart_疾病 AS H ON H.HEART_DISEASE_ID = HC.ID_HEART_DISEASE\r\n            INNER JOIN tb_kidney_疾病 AS K ON K.KIDNEY_DISEASE_ID = HC.ID_KIDNEY_DISEASE\r\n            INNER JOIN tb_respiratory_疾病 AS R ON R.RESPIRATORY_DISEASE_ID = HC.ID_RESPIRATORY_DISEASE\r\n            INNER JOIN tb_interment AS I ON I.INTERMENT_ID = HC.ID_INTERMENT\r\n            INNER JOIN tb_plant AS T ON T.PLANT_ID = HC.ID_PLANT\r\n            WHERE HC.HEALTH_CONDITIONS_ID = :HEALTH_CONDITIONS_ID\";\r\n        return $db->select($query, array(\":HEALTH_CONDITIONS_ID\" => $id));\r\n    }\r\n    static function 插入(AcsDataBase $db, HealthConditionsModel $healthConditions)\r\n    {\r\n        $values = $healthConditions->getValuesToDB();\r\n        $ids[\":ID_\" . Pregnant::PREGNANT] = $db->插入(self::查询怀孕的(), $values[Pregnant::PREGNANT]);\r\n        $ids[\":ID_\" . Diseases::DISEASES] = $db->插入(self::查询疾病(), $values[Diseases::DISEASES]);\r\n        $ids[\":ID_\" . HeartDisease::HEART_DISEASE] = $db->插入(self::查询炉床疾病(), $values[HeartDisease::HEART_DISEASE]);\r\n        $ids[\":ID_\" . KidneyDisease::KIDNEY_DISEASE] = $db->插入(self::查询肾疾病(), $values[KidneyDisease::KIDNEY_DISEASE]);\r\n        $ids[\":ID_\" . RespiratoryDisease::RESPIRATORY_DISEASE] = $db->插入(self::查询呼吸的疾病(), $values[RespiratoryDisease::RESPIRATORY_DISEASE]);\r\n        $ids[\":ID_\" . Interment::INTERMENT] = $db->插入(self::查询埋葬(), $values[Interment::INTERMENT]);\r\n        $ids[\":ID_\" . Plant::PLANT] = $db->插入(self::查询植物(), $values[Plant::PLANT]);\r\n        if(in_array(false, $ids)){\r\n            return false;\r\n        }\r\n        $ids[\":\" . HealthConditionsModel::WEIGHT] = $values[HealthConditionsModel::WEIGHT];\r\n        return $db->插入(self::查询健康条件(), $ids);\r\n    }\r\n    private static function 查询健康条件()\r\n    {\r\n        return \"INSERT INTO TB_HEALTH_CONDITIONS (WEIGHT, ID_PREGNANT, ID_DISEASES, ID_HEART_DISEASE, \r\n                        ID_KIDNEY_DISEASE, ID_RESPIRATORY_DISEASE, ID_INTERMENT, ID_PLANT) \r\n                  VALUES (:WEIGHT, :ID_PREGNANT, :ID_DISEASES, :ID_HEART_DISEASE, \r\n                        :ID_KIDNEY_DISEASE, :ID_RESPIRATORY_DISEASE, :ID_INTERMENT, :ID_PLANT)\";\r\n    }\r\n    private static function 查询怀孕的()\r\n    {\r\n        return \"INSERT INTO TB_PREGNANT (PREGNANT, DESCRIPTION)\r\n                  VALUES (:PREGNANT, :DESCRIPTION)\";\r\n    }\r\n    private static function 查询疾病()\r\n    {\r\n        return \"INSERT INTO TB_DISEASES (SMOKER, ALCOHOL, DRUGS, HYPERTENSION, DIABETES,AVC, HEART_ATTACK, LEPROSY, TUBERCULOSIS, \r\n                        CANCER, IN_BED, DOMICILED, OTHER_PRACTICES, MENTAL_HEALTH)\r\n                  VALUES (:SMOKER, :ALCOHOL, :DRUGS, :HYPERTENSION, :DIABETES, :AVC, :HEART_ATTACK, :LEPROSY, :TUBERCULOSIS, \r\n                        :CANCER, :IN_BED, :DOMICILED, :OTHER_PRACTICES, :MENTAL_HEALTH)\";\r\n    }\r\n    private static function 查询炉床疾病()\r\n    {\r\n        return \"INSERT INTO TB_HEART_DISEASE (HEART_DISEASE, INSUFFICIENCY, ANOTHER, DONT_KNOWN)\r\n                  VALUES (:HEART_DISEASE, :INSUFFICIENCY, :ANOTHER, :DONT_KNOWN)\";\r\n    }\r\n    private static function 查询肾疾病()\r\n    {\r\n        return \"INSERT INTO TB_KIDNEY_DISEASE (KIDNEY_DISEASE, INSUFFICIENCY, ANOTHER, DONT_KNOWN) \r\n                  VALUES (:KIDNEY_DISEASE, :INSUFFICIENCY, :ANOTHER, :DONT_KNOWN)\";\r\n    }\r\n    private static function 查询呼吸的疾病()\r\n    {\r\n        return \"INSERT INTO TB_RESPIRATORY_DISEASE (RESPIRATORY_DISEASE, ASTHMA, EMPHYSEMA, ANOTHER, DONT_KNOWN) \r\n                  VALUES (:RESPIRATORY_DISEASE, :ASTHMA, :EMPHYSEMA, :ANOTHER, :DONT_KNOWN)\";\r\n    }\r\n    private static function 查询埋葬()\r\n    {\r\n        return \"INSERT INTO TB_INTERMENT (INTERMENT, DESCRIPTION)\r\n                  VALUES (:INTERMENT, :DESCRIPTION)\";\r\n    }\r\n    private static function 查询植物()\r\n    {\r\n        return \"INSERT INTO TB_PLANT (PLANT, DESCRIPTION)\r\n                  VALUES (:PLANT, :DESCRIPTION)\";\r\n    }\r\n}\r\n```",
            "created_at": "2019-05-13T00:14:34Z",
            "html_url": "https://github.com/program-in-chinese/vscode_english_chinese_dictionary/issues/27#issuecomment-491641055",
            "id": 491641055,
            "issue_url": "https://api.github.com/repos/program-in-chinese/vscode_english_chinese_dictionary/issues/27",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTY0MTA1NQ==",
            "updated_at": "2019-05-13T00:14:34Z",
            "url": "https://api.github.com/repos/program-in-chinese/vscode_english_chinese_dictionary/issues/comments/491641055",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/392497?v=4",
                "events_url": "https://api.github.com/users/nobodxbodon/events{/privacy}",
                "followers_url": "https://api.github.com/users/nobodxbodon/followers",
                "following_url": "https://api.github.com/users/nobodxbodon/following{/other_user}",
                "gists_url": "https://api.github.com/users/nobodxbodon/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nobodxbodon",
                "id": 392497,
                "login": "nobodxbodon",
                "node_id": "MDQ6VXNlcjM5MjQ5Nw==",
                "organizations_url": "https://api.github.com/users/nobodxbodon/orgs",
                "received_events_url": "https://api.github.com/users/nobodxbodon/received_events",
                "repos_url": "https://api.github.com/users/nobodxbodon/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nobodxbodon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nobodxbodon/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nobodxbodon"
            }
        },
        {
            "author_association": "MEMBER",
            "body": "JavaScript vsc内置语言支持\r\nhttps://github.com/YouSour/dental_sengRatha/blob/d2623bb49a872a646892b54a11bb13b34b650cb7/dental/client/templates/diseaseItem/diseaseItem.js\r\n```javascript\r\n/**\r\n * Index\r\n */\r\nTemplate.dental_diseaseItem.onRendered(function() {\r\n  // Create new  alertify\r\n  createNewAlertify([\"diseaseItem\", 'diseaseCategory']);\r\n});\r\n\r\nTemplate.dental_diseaseItem.events({\r\n  'click .insert': function(e, t) {\r\n    alertify.diseaseItem(fa(\"plus\", \"Disease Item\"), renderTemplate(\r\n      Template.dental_diseaseItemInsert)).maximize();\r\n  },\r\n  'click .update': function(e, t) {\r\n    var data = this;\r\n    alertify.diseaseItem(fa(\"pencil\", \"Disease Item\"), renderTemplate(\r\n      Template.dental_diseaseItemUpdate, data)).maximize();\r\n  },\r\n  'click .remove': function(e, t) {\r\n    var self = this;\r\n\r\n    alertify.confirm(\r\n      fa(\"remove\", \"Disease Item\"),\r\n      \"Are you sure to delete [\" + self._id + \"] ?\",\r\n      function(closeEvent) {\r\n        Dental.Collection.DiseaseItem.remove(self._id, function(error) {\r\n          if (error) {\r\n            alertify.error(error.message);\r\n          } else {\r\n            alertify.success(\"Success\");\r\n          }\r\n        });\r\n      },\r\n      null\r\n    );\r\n  },\r\n  'click .show': function(e, t) {\r\n    var data = this;\r\n    alertify.diseaseItem(fa(\"eye\", \"Disease Item\"), renderTemplate(Template.dental_diseaseItemShow,\r\n      data));\r\n  }\r\n});\r\n\r\n/**\r\n * Insert\r\n */\r\nTemplate.dental_diseaseItemInsert.onCreated(function() {\r\n  Meteor.subscribe('dental_diseaseCategory');\r\n});\r\n\r\nTemplate.dental_diseaseItemInsert.events({\r\n  'click .diseaseCategoryAddon': function(e, t) {\r\n    alertify.diseaseCategory(fa(\"plus\", \"Disease Category\"),\r\n      renderTemplate(Template.dental_diseaseCategoryInsert));\r\n  }\r\n});\r\n\r\n/**\r\n * Update\r\n */\r\nTemplate.dental_diseaseItemUpdate.onCreated(function() {\r\n  Meteor.subscribe('dental_diseaseCategory');\r\n});\r\n\r\nTemplate.dental_diseaseItemUpdate.events({\r\n  'click .diseaseCategoryAddon': function(e, t) {\r\n    alertify.diseaseCategory(fa(\"plus\", \"Disease Category\"),\r\n      renderTemplate(Template.dental_diseaseCategoryInsert));\r\n  }\r\n});\r\n\r\n/**\r\n * Hook\r\n */\r\nAutoForm.hooks({\r\n  dental_diseaseItemInsert: {\r\n    before: {\r\n      insert: function(doc) {\r\n        doc.branchId = Session.get('currentBranch');\r\n        Meteor.call('dental');\r\n        return doc;\r\n      }\r\n    },\r\n    onSuccess: function(formType, result) {\r\n      $('select').each(function() {\r\n        $(this).select2(\"val\", \"\");\r\n      });\r\n\r\n      alertify.success('Success');\r\n    },\r\n    onError: function(formType, error) {\r\n      alertify.error(error.message);\r\n    }\r\n  },\r\n  dental_diseaseItemUpdate: {\r\n    onSuccess: function(formType, result) {\r\n      alertify.diseaseItem().close();\r\n      alertify.success('Success');\r\n    },\r\n    onError: function(formType, error) {\r\n      alertify.error(error.message);\r\n    }\r\n  }\r\n\r\n});\r\n```\r\n标识符大部分未识别:\r\n```javascript\r\n/**\r\n * Index\r\n */\r\nTemplate.dental_diseaseItem.onRendered(function() {\r\n  // Create new  alertify\r\n  createNewAlertify([\"diseaseItem\", 'diseaseCategory']);\r\n});\r\n\r\nTemplate.dental_diseaseItem.events({\r\n  'click .插入': function(e, t) {\r\n    alertify.diseaseItem(fa(\"plus\", \"Disease Item\"), 回报Template(\r\n      Template.dental_diseaseItemInsert)).maximize();\r\n  },\r\n  'click .update': function(e, t) {\r\n    var data = this;\r\n    alertify.diseaseItem(fa(\"pencil\", \"Disease Item\"), 回报Template(\r\n      Template.dental_diseaseItemUpdate, data)).maximize();\r\n  },\r\n  'click .remove': function(e, t) {\r\n    var self = this;\r\n\r\n    alertify.confirm(\r\n      fa(\"remove\", \"Disease Item\"),\r\n      \"Are you sure to delete [\" + self._id + \"] ?\",\r\n      function(closeEvent) {\r\n        Dental.Collection.DiseaseItem.remove(self._id, function(error) {\r\n          if (error) {\r\n            alertify.error(error.message);\r\n          } else {\r\n            alertify.success(\"Success\");\r\n          }\r\n        });\r\n      },\r\n      null\r\n    );\r\n  },\r\n  'click .show': function(e, t) {\r\n    var data = this;\r\n    alertify.diseaseItem(fa(\"eye\", \"Disease Item\"), 回报Template(Template.dental_diseaseItemShow,\r\n      data));\r\n  }\r\n});\r\n\r\n/**\r\n * Insert\r\n */\r\nTemplate.dental_diseaseItemInsert.onCreated(function() {\r\n  Meteor.subscribe('dental_diseaseCategory');\r\n});\r\n\r\nTemplate.dental_diseaseItemInsert.events({\r\n  'click .diseaseCategoryAddon': function(e, t) {\r\n    alertify.diseaseCategory(fa(\"plus\", \"Disease Category\"),\r\n      回报Template(Template.dental_diseaseCategoryInsert));\r\n  }\r\n});\r\n\r\n/**\r\n * Update\r\n */\r\nTemplate.dental_diseaseItemUpdate.onCreated(function() {\r\n  Meteor.subscribe('dental_diseaseCategory');\r\n});\r\n\r\nTemplate.dental_diseaseItemUpdate.events({\r\n  'click .diseaseCategoryAddon': function(e, t) {\r\n    alertify.diseaseCategory(fa(\"plus\", \"Disease Category\"),\r\n      回报Template(Template.dental_diseaseCategoryInsert));\r\n  }\r\n});\r\n\r\n/**\r\n * Hook\r\n */\r\nAutoForm.hooks({\r\n  dental_diseaseItemInsert: {\r\n    before: {\r\n      插入: function(doc) {\r\n        doc.branchId = Session.get('currentBranch');\r\n        Meteor.call('dental');\r\n        return doc;\r\n      }\r\n    },\r\n    打开成功: function(formType, result) {\r\n      $('select').each(function() {\r\n        $(this).select2(\"val\", \"\");\r\n      });\r\n\r\n      alertify.success('Success');\r\n    },\r\n    打开错误: function(formType, error) {\r\n      alertify.error(error.message);\r\n    }\r\n  },\r\n  dental_diseaseItemUpdate: {\r\n    打开成功: function(formType, result) {\r\n      alertify.diseaseItem().close();\r\n      alertify.success('Success');\r\n    },\r\n    打开错误: function(formType, error) {\r\n      alertify.error(error.message);\r\n    }\r\n  }\r\n\r\n});\r\n```",
            "created_at": "2019-05-13T20:26:12Z",
            "html_url": "https://github.com/program-in-chinese/vscode_english_chinese_dictionary/issues/27#issuecomment-491973138",
            "id": 491973138,
            "issue_url": "https://api.github.com/repos/program-in-chinese/vscode_english_chinese_dictionary/issues/27",
            "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTk3MzEzOA==",
            "updated_at": "2019-05-13T20:26:12Z",
            "url": "https://api.github.com/repos/program-in-chinese/vscode_english_chinese_dictionary/issues/comments/491973138",
            "user": {
                "avatar_url": "https://avatars1.githubusercontent.com/u/392497?v=4",
                "events_url": "https://api.github.com/users/nobodxbodon/events{/privacy}",
                "followers_url": "https://api.github.com/users/nobodxbodon/followers",
                "following_url": "https://api.github.com/users/nobodxbodon/following{/other_user}",
                "gists_url": "https://api.github.com/users/nobodxbodon/gists{/gist_id}",
                "gravatar_id": "",
                "html_url": "https://github.com/nobodxbodon",
                "id": 392497,
                "login": "nobodxbodon",
                "node_id": "MDQ6VXNlcjM5MjQ5Nw==",
                "organizations_url": "https://api.github.com/users/nobodxbodon/orgs",
                "received_events_url": "https://api.github.com/users/nobodxbodon/received_events",
                "repos_url": "https://api.github.com/users/nobodxbodon/repos",
                "site_admin": false,
                "starred_url": "https://api.github.com/users/nobodxbodon/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/nobodxbodon/subscriptions",
                "type": "User",
                "url": "https://api.github.com/users/nobodxbodon"
            }
        }
    ],
    "comments": 4,
    "comments_url": "https://api.github.com/repos/program-in-chinese/vscode_english_chinese_dictionary/issues/27/comments",
    "created_at": "2019-05-12T23:27:31Z",
    "event_data": [],
    "events_url": "https://api.github.com/repos/program-in-chinese/vscode_english_chinese_dictionary/issues/27/events",
    "html_url": "https://github.com/program-in-chinese/vscode_english_chinese_dictionary/issues/27",
    "id": 443158807,
    "labels": [],
    "labels_url": "https://api.github.com/repos/program-in-chinese/vscode_english_chinese_dictionary/issues/27/labels{/name}",
    "locked": false,
    "milestone": null,
    "node_id": "MDU6SXNzdWU0NDMxNTg4MDc=",
    "number": 27,
    "repository_url": "https://api.github.com/repos/program-in-chinese/vscode_english_chinese_dictionary",
    "state": "open",
    "title": "测试不同编程语言的源码翻译",
    "updated_at": "2019-05-13T21:54:06Z",
    "url": "https://api.github.com/repos/program-in-chinese/vscode_english_chinese_dictionary/issues/27",
    "user": {
        "avatar_url": "https://avatars1.githubusercontent.com/u/392497?v=4",
        "events_url": "https://api.github.com/users/nobodxbodon/events{/privacy}",
        "followers_url": "https://api.github.com/users/nobodxbodon/followers",
        "following_url": "https://api.github.com/users/nobodxbodon/following{/other_user}",
        "gists_url": "https://api.github.com/users/nobodxbodon/gists{/gist_id}",
        "gravatar_id": "",
        "html_url": "https://github.com/nobodxbodon",
        "id": 392497,
        "login": "nobodxbodon",
        "node_id": "MDQ6VXNlcjM5MjQ5Nw==",
        "organizations_url": "https://api.github.com/users/nobodxbodon/orgs",
        "received_events_url": "https://api.github.com/users/nobodxbodon/received_events",
        "repos_url": "https://api.github.com/users/nobodxbodon/repos",
        "site_admin": false,
        "starred_url": "https://api.github.com/users/nobodxbodon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nobodxbodon/subscriptions",
        "type": "User",
        "url": "https://api.github.com/users/nobodxbodon"
    }
}